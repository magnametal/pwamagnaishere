[{"C:\\codes\\pwamagnaishere\\src\\index.js":"1","C:\\codes\\pwamagnaishere\\src\\App.js":"2","C:\\codes\\pwamagnaishere\\src\\reportWebVitals.js":"3","C:\\codes\\pwamagnaishere\\src\\serviceWorkerRegistration.js":"4","C:\\codes\\pwamagnaishere\\src\\firebase.js":"5","C:\\codes\\pwamagnaishere\\src\\Views\\Login.js":"6","C:\\codes\\pwamagnaishere\\src\\Views\\Profile.js":"7","C:\\codes\\pwamagnaishere\\src\\Views\\News.js":"8","C:\\codes\\pwamagnaishere\\src\\Views\\admin\\admin.js":"9","C:\\codes\\pwamagnaishere\\src\\Componentes\\MagnaLoading.js":"10","C:\\codes\\pwamagnaishere\\src\\Views\\MagicMenu.js":"11","C:\\codes\\pwamagnaishere\\src\\Componentes\\Header.js":"12","C:\\codes\\pwamagnaishere\\src\\Componentes\\EspecialButtons.js":"13"},{"size":773,"mtime":1655250374887,"results":"14","hashOfConfig":"15"},{"size":7989,"mtime":1657059037261,"results":"16","hashOfConfig":"15"},{"size":364,"mtime":1612996114000,"results":"17","hashOfConfig":"15"},{"size":5064,"mtime":1612996114000,"results":"18","hashOfConfig":"15"},{"size":1264,"mtime":1655248884317,"results":"19","hashOfConfig":"15"},{"size":5680,"mtime":1655318376239,"results":"20","hashOfConfig":"15"},{"size":6609,"mtime":1657052060723,"results":"21","hashOfConfig":"15"},{"size":16530,"mtime":1656183363110,"results":"22","hashOfConfig":"15"},{"size":9240,"mtime":1655250522774,"results":"23","hashOfConfig":"15"},{"size":1131,"mtime":1656183815410,"results":"24","hashOfConfig":"15"},{"size":1228,"mtime":1657053829889,"results":"25","hashOfConfig":"15"},{"size":968,"mtime":1657031547460,"results":"26","hashOfConfig":"15"},{"size":976,"mtime":1657058110848,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1cssx0q",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\codes\\pwamagnaishere\\src\\index.js",[],["60","61"],"C:\\codes\\pwamagnaishere\\src\\App.js",["62","63","64","65","66"],"C:\\codes\\pwamagnaishere\\src\\reportWebVitals.js",[],"C:\\codes\\pwamagnaishere\\src\\serviceWorkerRegistration.js",[],"C:\\codes\\pwamagnaishere\\src\\firebase.js",[],"C:\\codes\\pwamagnaishere\\src\\Views\\Login.js",[],"C:\\codes\\pwamagnaishere\\src\\Views\\Profile.js",["67","68"],"import React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Notifications,\n  Settings,\n  Star,\n  ExitToApp,\n  Close as CloseIcon,\n} from \"@material-ui/icons\";\nimport {\n  Grid,\n  Avatar,\n  Typography,\n  Badge,\n  IconButton,\n  TextField,\n  CircularProgress,\n  Button,\n  Dialog,\n  ListItem,\n  List,\n  AppBar,\n  Toolbar,\n  Slide,\n  Container,\n} from \"@material-ui/core\";\nimport { logout } from \"../firebase\";\nimport Header from '../Componentes/Header'\nconst logo = process.env.PUBLIC_URL + \"/logodk.svg\";\n\n// import { v4 as uuidv4 } from 'uuid';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n    button: {\n      padding: 5,\n    },\n    blue: {\n      color: theme.palette.getContrastText(\"#0080ff\"),\n      backgroundColor: \"#0080ff\",\n    },\n    purple: {\n      color: theme.palette.getContrastText(\"#8000ff\"),\n      backgroundColor: \"#8000ff\",\n    },\n    pink: {\n      color: theme.palette.getContrastText(\"#ff80c0\"),\n      backgroundColor: \"#ff80c0\",\n    },\n    golden: {\n      color: theme.palette.getContrastText(\"#ffa909\"),\n      backgroundColor: \"#ffa909\",\n    },\n    gray: {\n      color: theme.palette.getContrastText(\"#b0b0b0\"),\n      backgroundColor: \"#b0b0b0\",\n    },\n    appBar: {\n      position: \"relative\",\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n  })\n);\n\nfunction Profile(props) {\n  const classes = useStyles();\n  const { userData } = props;\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        alignContent=\"center\"\n        style={{ minHeight: \"40vh\" }}\n      >\n        <Header />\n        <Grid item xs={12}>\n          {userData ? (\n            <Grid\n              container\n              spacing={0}\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n              alignContent=\"center\"\n            >\n              <Avatar\n                alt=\"Remy Sharp\"\n                src={userData.photoURL}\n                style={{ width: 220, height: 220 }}\n              />\n              <Typography align=\"center\" variant=\"h4\">\n                {userData.displayName}\n              </Typography>\n            </Grid>\n          ) : (\n            <div className={classes.root}>\n              <CircularProgress\n                style={{ marginBottom: 55, marginTop: 15 }}\n                color=\"secondary\"\n              />\n            </div>\n          )}\n        </Grid>\n      </Grid>\n      <Grid style={{ marginTop: 10 }}>\n        <Grid\n          container\n          spacing={0}\n          direction=\"column\"\n          alignItems=\"center\"\n          justify=\"center\"\n          alignContent=\"center\"\n          style={{ marginTop: 15 }}\n        >\n          <Grid item md className={classes.root}>\n            <Badge color=\"secondary\" overlap=\"circle\" badgeContent=\" \">\n              <IconButton className={classes.button}>\n                <Avatar className={classes.blue}>\n                  <Notifications />\n                </Avatar>\n              </IconButton>\n            </Badge>\n            <IconButton className={classes.button}>\n              <Avatar className={classes.golden}>\n                <Star />\n              </Avatar>\n            </IconButton>\n            <IconButton onClick={handleClickOpen} className={classes.button}>\n              <Avatar className={classes.purple}>\n                <Settings />\n              </Avatar>\n            </IconButton>\n            <IconButton\n              className={classes.button}\n              onClick={() => {\n                logout();\n              }}\n            >\n              <Avatar className={classes.gray}>\n                <ExitToApp />\n              </Avatar>\n            </IconButton>\n          </Grid>\n        </Grid>\n        <Dialog\n          fullScreen\n          open={open}\n          onClose={handleClose}\n          TransitionComponent={Slide}\n        >\n          {userData ? (\n            <>\n              <AppBar className={classes.appBar}>\n                <Toolbar>\n                  <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    onClick={handleClose}\n                    aria-label=\"Cerrar\"\n                  >\n                    <CloseIcon />\n                  </IconButton>\n                  <Typography variant=\"h6\" className={classes.title}>\n                    Perfil\n                  </Typography>\n                  <Button autoFocus color=\"inherit\" onClick={handleClose}>\n                    Guardar\n                  </Button>\n                </Toolbar>\n              </AppBar>\n              <List>\n                <ListItem>\n                  <Grid container spacing={0}>\n                    <Grid item xs></Grid>\n                    <Grid container spacing={0}>\n                      <Grid item xs></Grid>\n                      <Grid item xs={8}>\n                        <Avatar\n                          alt=\"Remy Sharp\"\n                          src={userData.photoURL}\n                          style={{ width: \"100%\", height: \"100%\" }}\n                          className={classes.large}\n                        />\n                      </Grid>\n                      <Grid item xs></Grid>\n                    </Grid>\n                    <Grid item xs></Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container className={classes.root}>\n                    <Typography align=\"center\" variant=\"h5\">\n                      {userData.email}\n                    </Typography>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <TextField\n                    margin=\"dense\"\n                    id=\"nombre\"\n                    label=\"Nombre\"\n                    type=\"text\"\n                    fullWidth\n                    value={userData.displayName}\n                  />\n                </ListItem>\n              </List>\n            </>\n          ) : (\n            <Grid container className={classes.root}>\n              <CircularProgress\n                style={{ marginBottom: 55, marginTop: 15 }}\n                color=\"secondary\"\n              />\n            </Grid>\n          )}\n        </Dialog>\n      </Grid>\n    </>\n  );\n}\n\nexport default Profile;\n","C:\\codes\\pwamagnaishere\\src\\Views\\News.js",["69","70"],"import React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport {\n  InfoOutlined,\n  FiberNew,\n  FavoriteBorder,\n  ShareOutlined,\n  MoreVert,\n} from \"@material-ui/icons\";\nimport {\n  GridList,\n  GridListTile,\n  GridListTileBar,\n  IconButton,\n  CircularProgress,\n  Grid,\n  Slide,\n  Dialog,\n  Typography,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  TextField,\n  Snackbar,\n} from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { db } from \"../firebase\";\n// import { v4 as uuidv4 } from 'uuid';\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport MagnaLoading from \"../Componentes/MagnaLoading\";\nimport * as moment from \"moment\";\nimport \"moment/locale/es\";\nmoment().locale(\"es\");\n\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: \"100%\",\n      height: \"80%\",\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\",\n    },\n    titleBar: {\n      background:\n        \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" +\n        \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\",\n    },\n    cover: {\n      width: 151,\n    },\n  })\n);\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Loading() {\n  const classes = useStyles();\n  const [visible, setVisible] = React.useState(true);\n  React.useEffect(() => {\n    const intervalo = setInterval(() => {\n      if (!visible) {\n        clearInterval(intervalo);\n        setVisible(true);\n      } else {\n        clearInterval(intervalo);\n        setVisible(false);\n      }\n    }, 4000);\n    return intervalo;\n  }, [visible]);\n\n  return (\n    <>\n      <MagnaLoading visible={visible}/> \n      <GridList cellHeight={200} spacing={4} className={classes.gridList}>\n        <GridListTile cols={2} rows={2}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={2} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={2} rows={2}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={2} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={2} rows={2}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={1} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n        <GridListTile cols={2} rows={1}>\n          <Skeleton\n            variant=\"rect\"\n            animation=\"wave\"\n            style={{ height: \"100%\", width: \"100%\" }}\n          />\n        </GridListTile>\n      </GridList>\n    </>\n  );\n}\n\nfunction Content(props) {\n  const { content, setOpenArtHandler, setOpen } = props;\n  const classes = useStyles();\n  return (\n    <GridList cellHeight={200} spacing={1} className={classes.gridList}>\n      {content.map((tile, index) => {\n        return (\n          <GridListTile\n            key={index}\n            cols={tile.featured ? 2 : 1}\n            rows={tile.featured ? 2 : 1}\n            onClick={() => {\n              setOpenArtHandler(tile);\n              setOpen(true);\n            }}\n          >\n            <img src={tile.img} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              titlePosition=\"top\"\n              actionIcon={\n                <IconButton\n                  aria-label={`star ${tile.title}`}\n                  className={classes.icon}\n                >\n                  {tile.featured ? <FiberNew /> : <InfoOutlined />}\n                </IconButton>\n              }\n              actionPosition=\"left\"\n              className={classes.titleBar}\n            />\n          </GridListTile>\n        );\n      })}\n    </GridList>\n  );\n}\n\nfunction NewArtDialog(props) {\n  const classes = useStyles();\n  const {\n    setOpenArt,\n    setOpen,\n    openArt,\n    open,\n    commentThis,\n    comments,\n    handleChangeInput,\n    handleClose,\n    commentInput,\n  } = props;\n  return (\n    <Dialog\n      fullScreen\n      open={open}\n      onClose={handleClose}\n      TransitionComponent={Slide}\n    >\n      {openArt ? (\n        <Grid className={classes.root}>\n          <Grid container spacing={0}>\n            <Grid item xs></Grid>\n            <Grid container spacing={0}>\n              <Grid item xs></Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  fullWidth\n                  onClick={() => {\n                    setOpenArt(null);\n                    setOpen(false);\n                  }}\n                >\n                  Cerrar\n                </Button>\n              </Grid>\n              <Grid item xs></Grid>\n            </Grid>\n            <Grid item xs></Grid>\n          </Grid>\n          <Grid container spacing={0}>\n            <Grid item xs></Grid>\n            <Grid container spacing={0}>\n              <Grid item xs></Grid>\n              <Grid item xs={12}>\n                <img\n                  src={openArt.img}\n                  alt=\"contexto\"\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item xs></Grid>\n            </Grid>\n            <Grid item xs></Grid>\n          </Grid>\n          <Grid container spacing={0}>\n            <Grid item xs></Grid>\n            <Grid container spacing={0}>\n              <Grid item xs></Grid>\n              <Grid item xs={12}>\n                <Typography\n                  align=\"center\"\n                  variant=\"h4\"\n                  style={{ marginTop: 10 }}\n                >\n                  {openArt.title}\n                </Typography>\n                <Grid container className={classes.root}>\n                  <Card\n                    className={classes.root}\n                    style={{ width: \"97%\", marginBottom: 5, marginTop: 5 }}\n                  >\n                    <CardContent style={{ width: \"100%\" }}>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        Descripción:\n                      </Typography>\n                      <Typography variant=\"body2\" component=\"p\">\n                        {openArt.description}\n                      </Typography>\n                    </CardContent>\n                    <CardActions style={{ width: \"100%\" }}>\n                      <IconButton aria-label=\"add to favorites\" edge=\"start\">\n                        <FavoriteBorder />\n                      </IconButton>\n                      <IconButton aria-label=\"share\" edge=\"start\">\n                        <ShareOutlined />\n                      </IconButton>\n                      <IconButton aria-label=\"share\" edge=\"start\">\n                        <MoreVert />\n                      </IconButton>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              </Grid>\n              <Grid item xs></Grid>\n            </Grid>\n            <Grid item xs></Grid>\n          </Grid>\n          <Grid container spacing={0}>\n            <Grid item xs></Grid>\n            <Grid container spacing={0}>\n              <Grid item xs></Grid>\n              <Grid item xs={12}>\n                <Grid container className={classes.root}>\n                  <Grid container spacing={0} style={{ marginTop: 15 }}>\n                    <Grid item xs></Grid>\n                    <Grid container spacing={0}>\n                      <Grid item xs></Grid>\n                      <Grid item xs={10}>\n                        <TextField\n                          id=\"commentInput\"\n                          label=\"Multiline\"\n                          multiline\n                          rows={4}\n                          variant=\"outlined\"\n                          onChange={handleChangeInput}\n                          value={commentInput}\n                          fullWidth\n                        />\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          fullWidth\n                          style={{ marginTop: 10, color: \"#fff\" }}\n                          onClick={commentThis}\n                        >\n                          Comentar\n                        </Button>\n                      </Grid>\n                      <Grid item xs></Grid>\n                    </Grid>\n                    <Grid item xs></Grid>\n                  </Grid>\n\n                  {comments ? (\n                    comments.map((comment, index) => {\n                      return <OutlinedCard comment={comment} index={index} key={index}/>;\n                    })\n                  ) : (\n                    <Grid container className={classes.root}>\n                      <CircularProgress\n                        style={{ marginBottom: 55, marginTop: 15 }}\n                        color=\"secondary\"\n                      />\n                    </Grid>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item xs></Grid>\n            </Grid>\n            <Grid item xs></Grid>\n          </Grid>\n        </Grid>\n      ) : (\n        <Grid container className={classes.root}>\n          <CircularProgress\n            style={{ marginBottom: 55, marginTop: 15 }}\n            color=\"secondary\"\n          />\n        </Grid>\n      )}\n    </Dialog>\n  );\n}\n\nfunction OutlinedCard(props) {\n  const classes = useStyles();\n  const { comment, index } = props;\n  return (\n    <Card\n      className={classes.root}\n      variant=\"outlined\"\n      style={{\n        display: \"flex\",\n        alignItems: \"left\",\n        width: \"95%\",\n        marginBottom: 3,\n        marginTop: 2,\n      }}\n      key={index}\n    >\n      <CardHeader\n        avatar={<Avatar alt=\"avatar\" src={comment.img}></Avatar>}\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVert />\n          </IconButton>\n        }\n        title={comment.name}\n        subheader={moment(comment.time).fromNow()}\n        style={{ width: \"100%\" }}\n      />\n      <CardContent style={{ width: \"100%\" }}>\n        <Typography variant=\"body2\" component=\"p\">\n          {comment.message}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction News(props) {\n  const { userData, setValue } = props;\n  const [ready, setReady] = React.useState(false);\n  const [content, setContent] = React.useState(false);\n  const [quantity] = React.useState(9);\n  const [open, setOpen] = React.useState(false);\n  const [openArt, setOpenArt] = React.useState(null);\n  const [comments, setComments] = React.useState(null);\n  const [commentInput, setCommentInput] = React.useState(\"\");\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [snackType, setSnackType] = React.useState(0);\n  const [open2, setOpen2] = React.useState(false);\n\n  const classes = useStyles();\n\n  const updateComments = () => {\n    setComments(null);\n    db.collection(\"artworks\")\n      .where(\"title\", \"==\", openArt.title)\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          db.collection(\"comments\")\n            .where(\"id_art\", \"==\", doc.id)\n            .orderBy(\"time\", \"desc\")\n            .get()\n            .then((querySnapshot2) => {\n              const data2 = querySnapshot2.docs.map((docu) => docu.data());\n              setComments(data2);\n            });\n        });\n      });\n  };\n\n  const handleChangeInput = (event) => {\n    setCommentInput(event.target.value);\n  };\n  const setOpenArtHandler = (art) => {\n    setOpenArt(art);\n  };\n  const resetAll = () => {\n    setCommentInput(\"\");\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClickOpen2 = () => {\n    setOpen2(true);\n  };\n  const handleClose2 = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen2(false);\n  };\n  const commentThis = () => {\n    if (userData) {\n      if (!commentInput || commentInput === \"\") {\n        setSnackType(\"error\");\n        setSnackMessage(\"Por favor verifique el campo de comentario.\");\n        handleClickOpen2();\n      } else {\n        if (userData.isAnonymous) {\n          setOpenArt(null);\n          setOpen(false);\n          setValue(\"login\");\n        } else {\n          db.collection(\"artworks\")\n            .where(\"title\", \"==\", openArt.title)\n            .get()\n            .then((querySnapshot) => {\n              querySnapshot.forEach((doc) => {\n                db.collection(\"comments\")\n                  .add({\n                    id_art: doc.id,\n                    img: userData.photoURL,\n                    message: commentInput,\n                    name: userData.displayName,\n                    time: moment().format(),\n                  })\n                  .then(() => {\n                    setSnackType(\"success\");\n                    setSnackMessage(\"Registro exitoso\");\n                    handleClickOpen2();\n                    resetAll();\n                    updateComments();\n                  });\n              });\n            });\n        }\n      }\n    } else {\n      setOpenArt(null);\n      setOpen(false);\n      setValue(\"login\");\n    }\n  };\n  React.useEffect(() => {\n    const unsubscribe = db\n      .collection(\"artworks\")\n      .where(\"new\", \"==\", true)\n      .orderBy(\"time\", \"desc\")\n      .limit(quantity)\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n        setContent(data);\n        setReady(true);\n      });\n      return unsubscribe;\n  }, []);\n\n  React.useEffect(() => {\n    if (openArt) {\n      return updateComments();\n    }\n  }, [openArt]);\n\n  if (!ready) return <Loading />;\n\n  return (\n    <>\n      <Grid container className={classes.root}>\n        <Content\n          content={content}\n          setOpenArtHandler={setOpenArtHandler}\n          setOpen={setOpen}\n        />\n        <CircularProgress\n          style={{ marginBottom: 55, marginTop: 15 }}\n          color=\"secondary\"\n        />\n      </Grid>\n      <NewArtDialog\n        setOpenArt={setOpenArt}\n        setOpen={setOpen}\n        openArt={openArt}\n        open={open}\n        commentThis={commentThis}\n        comments={comments}\n        handleChangeInput={handleChangeInput}\n        handleClose={handleClose}\n        commentInput={commentInput}\n      />\n      <Snackbar\n        open={open2}\n        autoHideDuration={1500}\n        onClose={handleClose2}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      >\n        <Alert onClose={handleClose2} severity={snackType}>\n          {snackMessage}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n\nexport default News;\n","C:\\codes\\pwamagnaishere\\src\\Views\\admin\\admin.js",["71"],"import React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Image, Group, Add, Close as CloseIcon } from \"@material-ui/icons\";\nimport {\n  Grid,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n  Fab,\n  Button,\n  Dialog,\n  ListItem,\n  List,\n  AppBar,\n  Toolbar,\n  Slide,\n  IconButton,\n  TextField,\n  Snackbar,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { storage, db } from \"../../firebase\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport * as moment from \"moment\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n    fab: {\n      position: \"absolute\",\n      bottom: theme.spacing(11),\n      right: theme.spacing(4),\n    },\n  })\n);\n\nfunction AdminPanel(props) {\n  const classes = useStyles();\n  // const { userData } = props;\n  const [open, setOpen] = React.useState(false);\n  const [preview, setPreview] = React.useState(null);\n  const [fileName, setFilename] = React.useState(null);\n  const [file, setFile] = React.useState(null);\n  const [title, setTitle] = React.useState(null);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [snackType, setSnackType] = React.useState(0);\n  const [description, setDescription] = React.useState(null);\n  const [open2, setOpen2] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [progress, setProgress] = React.useState(0);\n\n  const handleClose2 = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen2(false);\n  };\n  const handleClickOpen2 = () => {\n    setOpen2(true);\n  };\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const changePreview = (event) => {\n    console.log(event.target.files[0]);\n    setPreview(URL.createObjectURL(event.target.files[0]));\n    setFile(event.target.files[0]);\n    setFilename(event.target.files[0].name);\n  };\n  const handleTitle = (event) => {\n    setTitle(event.target.value);\n  };\n  const handleDescription = (event) => {\n    setDescription(event.target.value);\n  };\n  const resetAll = () => {\n    setPreview(null);\n    setFile(null);\n    setFilename(null);\n    setTitle(null);\n    setDescription(null);\n    setProgress(0);\n    setLoading(false);\n  };\n  const addArtwork = () => {\n    if (preview && title && description && fileName) {\n      const newFileName = title.replaceAll(/\\s/g, \"\");\n      const ext = fileName.split(\".\")[1];\n      const finalName = newFileName + \".\" + ext;\n      var uploadTask = storage.child(\"art/\" + finalName).put(file);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          var p = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          setLoading(true);\n          setProgress(p);\n        },\n        (error) => {\n          console.log(error);\n          setProgress(0);\n          setLoading(false);\n        },\n        () => {\n          db.collection(\"artworks\")\n            .where(\"featured\", \"==\", true)\n            .get()\n            .then((querySnapshot) => {\n              querySnapshot.docs.map((doc) => {\n                var DocRef = db.collection(\"artworks\").doc(doc.id);\n                DocRef.update({\n                  featured: false,\n                });\n              });\n            })\n            .then(() => {\n              uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                setLoading(true);\n                db.collection(\"artworks\")\n                  .add({\n                    title: title,\n                    img: downloadURL,\n                    author: \"MagnaDK\",\n                    description: description,\n                    featured: true,\n                    new: true,\n                    time: moment().format(),\n                  })\n                  .then(() => {\n                    handleClose();\n                    setSnackType(\"success\");\n                    setSnackMessage(\"Registro exitoso\");\n                    handleClickOpen2();\n                    resetAll();\n                  });\n              });\n            });\n        }\n      );\n    } else {\n      setSnackType(\"error\");\n      setSnackMessage(\"Verifique los campos, no pueden estar vacíos\");\n      handleClickOpen2();\n      setProgress(0);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Grid container spacing={0}>\n        <Grid item xs></Grid>\n        <Grid container spacing={0}>\n          <Grid item xs></Grid>\n          <Grid item xs={8}>\n            <Typography align=\"center\" variant=\"h4\" style={{ marginTop: 50 }}>\n              Admin Panel\n            </Typography>\n            <List component=\"nav\" aria-label=\"admin list items\">\n              <ListItem button>\n                <ListItemIcon>\n                  <Image />\n                </ListItemIcon>\n                <ListItemText primary=\"Artworks\" />\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <Group />\n                </ListItemIcon>\n                <ListItemText primary=\"Users\" />\n              </ListItem>\n            </List>\n          </Grid>\n          <Grid item xs></Grid>\n        </Grid>\n        <Grid item xs></Grid>\n      </Grid>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        className={classes.fab}\n        onClick={handleClickOpen}\n        style={{ color: \"#fff\" }}\n      >\n        <Add />\n      </Fab>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Slide}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"Cerrar\"\n            >\n              <CloseIcon style={{ color: \"#fff\" }} />\n            </IconButton>\n            <Typography\n              variant=\"h6\"\n              className={classes.title}\n              style={{ color: \"#fff\" }}\n            >\n              Nuevo Contenido\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {!loading ? (\n          <List style={{ marginTop: 70 }}>\n            {preview ? (\n              <ListItem>\n                <Grid container spacing={0}>\n                  <Grid item xs></Grid>\n                  <Grid container spacing={0}>\n                    <Grid item xs></Grid>\n                    <Grid item xs={12}>\n                      <img\n                        src={preview}\n                        alt=\"contexto\"\n                        style={{ width: \"100%\" }}\n                      />\n                    </Grid>\n                    <Grid item xs></Grid>\n                  </Grid>\n                  <Grid item xs></Grid>\n                </Grid>\n              </ListItem>\n            ) : (\n              <></>\n            )}\n            <ListItem>\n              <Button variant=\"contained\" component=\"label\">\n                Subir archivo\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={changePreview}\n                  hidden\n                />\n              </Button>\n            </ListItem>\n            <ListItem>\n              <TextField\n                margin=\"dense\"\n                id=\"title\"\n                label=\"Título\"\n                type=\"text\"\n                variant=\"outlined\"\n                onChange={handleTitle}\n                fullWidth\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                id=\"description\"\n                label=\"Descripción\"\n                multiline\n                rows={4}\n                variant=\"outlined\"\n                onChange={handleDescription}\n                fullWidth\n              />\n            </ListItem>\n            <ListItem>\n              <Button\n                variant=\"contained\"\n                fullWidth\n                style={{ backgroundColor: \"#ff6fb7\", color: \"#fff\" }}\n                onClick={addArtwork}\n              >\n                Registrar y Publicar\n              </Button>\n            </ListItem>\n          </List>\n        ) : (\n          <ListItem>\n            <Grid container spacing={0}>\n              <Grid item xs></Grid>\n              <Grid container spacing={0}>\n                <Grid item xs></Grid>\n                <Grid item xs={10}>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={progress}\n                    style={{ marginTop: 300 }}\n                  />\n                </Grid>\n                <Grid item xs></Grid>\n              </Grid>\n              <Grid item xs></Grid>\n            </Grid>\n          </ListItem>\n        )}\n      </Dialog>\n      <Snackbar\n        open={open2}\n        autoHideDuration={1500}\n        onClose={handleClose2}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      >\n        <Alert onClose={handleClose2} severity={snackType}>\n          {snackMessage}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n\nexport default AdminPanel;\n","C:\\codes\\pwamagnaishere\\src\\Componentes\\MagnaLoading.js",["72"],"import React from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nconst logo = process.env.PUBLIC_URL + \"/logodk.svg\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n  })\r\n);\r\nfunction MagnaLoading({ visible }) {\r\n  const classes = useStyles();\r\n  if (!visible) {\r\n    return false;\r\n  }\r\n  return (\r\n    <Animated\r\n      animationIn=\"tada\"\r\n      animationOut=\"pulse\"\r\n      isVisible={visible}\r\n      animationInDuration={2000}\r\n      animationOutDuration={2000}\r\n      style={{\r\n        position: \"fixed\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n      }}\r\n    >\r\n      <Avatar\r\n        alt=\"Remy Sharp\"\r\n        src={logo}\r\n        style={{\r\n          width: 350,\r\n          height: 350,\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      />\r\n    </Animated>\r\n  );\r\n}\r\nexport default MagnaLoading;\r\n","C:\\codes\\pwamagnaishere\\src\\Views\\MagicMenu.js",["73","74"],"import React from \"react\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Notifications } from \"@material-ui/icons\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MagnaLoading from \"../Componentes/MagnaLoading\";\r\nimport Spline from \"@splinetool/react-spline\";\r\nimport EspecialButtons from \"../Componentes/EspecialButtons\"\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      height: '100vh',\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nfunction MagicMenu(props) {\r\n  const classes = useStyles();\r\n  const { userData, source } = props;\r\n  const [splineLoader, setSplineLoader] = React.useState(false);\r\n  function setSplineLoaded() {\r\n    setSplineLoader(true);\r\n  }\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        spacing={0}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        alignContent=\"center\"\r\n        className={classes.root}\r\n      >\r\n        <MagnaLoading visible={!splineLoader} />\r\n        <EspecialButtons />\r\n        <Spline\r\n          onLoad={() => setSplineLoaded()}\r\n          scene={source}\r\n        />\r\n\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MagicMenu;\r\n","C:\\codes\\pwamagnaishere\\src\\Componentes\\Header.js",[],"C:\\codes\\pwamagnaishere\\src\\Componentes\\EspecialButtons.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"83","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":22},{"ruleId":"79","severity":1,"message":"84","line":27,"column":8,"nodeType":"81","messageId":"82","endLine":27,"endColumn":23},{"ruleId":"79","severity":1,"message":"85","line":28,"column":8,"nodeType":"81","messageId":"82","endLine":28,"endColumn":23},{"ruleId":"79","severity":1,"message":"86","line":39,"column":7,"nodeType":"81","messageId":"82","endLine":39,"endColumn":12},{"ruleId":"79","severity":1,"message":"87","line":25,"column":3,"nodeType":"81","messageId":"82","endLine":25,"endColumn":12},{"ruleId":"79","severity":1,"message":"88","line":29,"column":7,"nodeType":"81","messageId":"82","endLine":29,"endColumn":11},{"ruleId":"89","severity":1,"message":"90","line":530,"column":6,"nodeType":"91","endLine":530,"endColumn":8,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":536,"column":6,"nodeType":"91","endLine":536,"endColumn":15,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":118,"column":44,"nodeType":"97","messageId":"98","endLine":118,"endColumn":46},{"ruleId":"79","severity":1,"message":"99","line":15,"column":9,"nodeType":"81","messageId":"82","endLine":15,"endColumn":16},{"ruleId":"79","severity":1,"message":"100","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":23},{"ruleId":"79","severity":1,"message":"101","line":21,"column":11,"nodeType":"81","messageId":"82","endLine":21,"endColumn":19},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","'createStyles' is defined but never used.","'Brightness4Icon' is defined but never used.","'Brightness7Icon' is defined but never used.","'theme' is assigned a value but never used.","'Container' is defined but never used.","'logo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'quantity'. Either include it or remove the dependency array.","ArrayExpression",["104"],"React Hook React.useEffect has a missing dependency: 'updateComments'. Either include it or remove the dependency array.",["105"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'classes' is assigned a value but never used.","'Notifications' is defined but never used.","'userData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [quantity]",{"range":"110","text":"111"},"Update the dependencies array to be: [openArt, updateComments]",{"range":"112","text":"113"},[15417,15419],"[quantity]",[15510,15519],"[openArt, updateComments]"]